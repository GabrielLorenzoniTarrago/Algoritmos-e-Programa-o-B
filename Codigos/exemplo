#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <ctime>

using namespace std;

// ============ ESTRUTURAS ============

struct Paciente {
    int id;
    string nome;
    char sexo;
    string dataNascimento;
    float altura;
    float peso;
};

struct Triagem {
    int id;
    int pacienteId;
    vector<int> sintomas;
    int pontuacao;
    string urgencia;
    string dataHora;
};

// ============ VARIÁVEIS GLOBAIS ============
vector<Paciente> pacientes;
vector<Triagem> triagens;
int proximoIdPaciente = 1;
int proximoIdTriagem = 1;

// ============ SINTOMAS ============
string sintomas[11] = {
    "Febre",
    "Tosse",
    "Dores musculares",
    "Coriza",
    "Falta de ar",
    "Dor de garganta",
    "Náusea/Vômito",
    "Diarreia",
    "Perda de olfato",
    "Perda de paladar",
    "Cefaleia"
};

int pontuacoes[11] = {
    2, // Febre
    1, // Tosse
    1, // Dores musculares
    1, // Coriza
    4, // Falta de ar
    1, // Dor de garganta
    2, // Náusea
    2, // Diarreia
    3, // Perda de olfato
    3, // Perda de paladar
    1  // Cefaleia
};

// ============ FUNÇÕES AUXILIARES ============

string dataHoraAtual() {
    time_t agora = time(0);
    tm* tempo = localtime(&agora);
    char buffer[80];
    strftime(buffer, 80, "%d/%m/%Y %H:%M:%S", tempo);
    return string(buffer);
}

string classificarUrgencia(int pontos) {
    if (pontos <= 2) return "Verde";
    else if (pontos <= 5) return "Amarelo";
    else if (pontos <= 8) return "Vermelho";
    else return "Vermelho+";
}

// ============ FUNÇÕES DO SISTEMA ============

void cadastrarPaciente() {
    Paciente p;
    p.id = proximoIdPaciente++;

    cout << "\n=== Cadastro de Paciente ===\n";
    cout << "Nome: ";
    getline(cin, p.nome);

    cout << "Sexo (M/F/O): ";
    cin >> p.sexo;
    cin.ignore();

    cout << "Data de nascimento (dd/mm/aaaa): ";
    getline(cin, p.dataNascimento);

    cout << "Altura (em metros): ";
    cin >> p.altura;

    cout << "Peso (em kg): ";
    cin >> p.peso;

    cin.ignore();

    pacientes.push_back(p);
    cout << "Paciente cadastrado com sucesso! ID: " << p.id << "\n";
}

void listarPacientes() {
    if (pacientes.empty()) {
        cout << "\nNenhum paciente cadastrado.\n";
        return;
    }

    cout << "\n=== Lista de Pacientes ===\n";
    for (int i = 0; i < pacientes.size(); i++) {
        Paciente p = pacientes[i];
        cout << "ID: " << p.id
             << " | Nome: " << p.nome
             << " | Sexo: " << p.sexo
             << " | Nascimento: " << p.dataNascimento
             << " | Altura: " << p.altura << "m"
             << " | Peso: " << p.peso << "kg\n";
    }
}

void realizarTriagem() {
    if (pacientes.empty()) {
        cout << "Nenhum paciente cadastrado.\n";
        return;
    }

    cout << "\n=== Realizar Triagem ===\n";
    listarPacientes();
    int idPaciente;
    cout << "Digite o ID do paciente: ";
    cin >> idPaciente;
    cin.ignore();

    bool encontrado = false;
    for (int i = 0; i < pacientes.size(); i++) {
        if (pacientes[i].id == idPaciente) {
            encontrado = true;
            break;
        }
    }

    if (!encontrado) {
        cout << "Paciente não encontrado.\n";
        return;
    }

    cout << "\nSelecione os sintomas (digite os números separados por espaço e ENTER no final):\n";
    for (int i = 0; i < 11; i++) {
        cout << (i + 1) << ") " << sintomas[i] << "\n";
    }

    vector<int> sintomasSelecionados;
    int s;
    string linha;
    getline(cin, linha); // limpar buffer
    getline(cin, linha); // ler sintomas

    istringstream iss(linha);
    while (iss >> s) {
        if (s >= 1 && s <= 11)
            sintomasSelecionados.push_back(s - 1);
    }

    int totalPontos = 0;
    for (int i = 0; i < sintomasSelecionados.size(); i++) {
        totalPontos += pontuacoes[sintomasSelecionados[i]];
    }

    string urgencia = classificarUrgencia(totalPontos);

    Triagem t;
    t.id = proximoIdTriagem++;
    t.pacienteId = idPaciente;
    t.sintomas = sintomasSelecionados;
    t.pontuacao = totalPontos;
    t.urgencia = urgencia;
    t.dataHora = dataHoraAtual();

    triagens.push_back(t);

    cout << "\nTriagem realizada com sucesso!\n";
    cout << "Data/Hora: " << t.dataHora << "\n";
    cout << "Pontuação: " << t.pontuacao << "\n";
    cout << "Classificação de urgência: " << t.urgencia << "\n";
}

void listarTriagens() {
    if (triagens.empty()) {
        cout << "Nenhuma triagem realizada.\n";
        return;
    }

    cout << "\n=== Histórico de Triagens ===\n";
    for (int i = 0; i < triagens.size(); i++) {
        Triagem t = triagens[i];

        string nomePaciente = "Desconhecido";
        for (int j = 0; j < pacientes.size(); j++) {
            if (pacientes[j].id == t.pacienteId) {
                nomePaciente = pacientes[j].nome;
                break;
            }
        }

        cout << "ID Triagem: " << t.id << " | Paciente: " << nomePaciente
             << " | Data: " << t.dataHora
             << " | Pontos: " << t.pontuacao
             << " | Urgência: " << t.urgencia << "\n";
    }
}

// ============ MENU ============

void menu() {
    cout << "\n===== MENU PRINCIPAL =====\n";
    cout << "1. Cadastrar paciente\n";
    cout << "2. Listar pacientes\n";
    cout << "3. Realizar triagem\n";
    cout << "4. Listar triagens\n";
    cout << "0. Sair\n";
    cout << "Escolha uma opção: ";
}

// ============ PROGRAMA PRINCIPAL ============

int main() {
    int opcao;

    while (true) {
        menu();
        cin >> opcao;
        cin.ignore();

        if (opcao == 1) {
            cadastrarPaciente();
        } else if (opcao == 2) {
            listarPacientes();
        } else if (opcao == 3) {
            realizarTriagem();
        } else if (opcao == 4) {
            listarTriagens();
        } else if (opcao == 0) {
            cout << "Saindo do programa...\n";
            break;
        } else {
            cout << "Opção inválida. Tente novamente.\n";
        }
    }

    return 0;
}
